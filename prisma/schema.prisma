// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Task {
    id          String        @id @default(cuid())
    startDate   DateTime?
    endDate     DateTime?
    isAllDay    Boolean       @default(false)
    status      Boolean       @default(false)
    name        String
    description String?       @db.Text
    Group       Group?        @relation(fields: [groupId], references: [id])
    groupId     String?
    User        User          @relation(fields: [userId], references: [id])
    userId      String
    attachments Attachment[]
    TaskHistory TaskHistory[]
}

model Attachment {
    id         String   @id @default(cuid())
    fileName   String
    fileKey    String   @unique
    uploadedAt DateTime @default(now())
    task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId     String
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    Note       Note?    @relation(fields: [noteId], references: [id])
    noteId     String?

    @@index([taskId])
    @@index([userId])
}

model TaskHistory {
    historyId   String    @id @default(cuid())
    Task        Task      @relation(fields: [taskId], references: [id])
    taskId      String
    startDate   DateTime?
    endDate     DateTime?
    isAllDay    Boolean   @default(false)
    status      Boolean   @default(false)
    name        String
    description String?   @db.Text
    Group       Group?    @relation(fields: [groupId], references: [id])
    groupId     String?
    userId      String
    user        User      @relation(fields: [userId], references: [id])
    changedAt   DateTime  @default(now())
}

model Note {
    id          String        @id @default(cuid())
    title       String
    content     String?       @db.Text
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    tags        Tag[]
    User        User          @relation(fields: [userId], references: [id])
    userId      String
    attachments Attachment[]
    NoteHistory NoteHistory[]
}

model Tag {
    id     String @id @default(cuid())
    name   String
    User   User   @relation(fields: [userId], references: [id])
    userId String
    notes  Note[]

    @@unique([userId, name])
}

model NoteHistory {
    id        String   @id @default(cuid())
    title     String
    content   String?  @db.Text
    Note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
    noteId    String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    changedAt DateTime @default(now())
}

model Group {
    id          String        @id @default(cuid())
    name        String
    color       String
    userId      String
    user        User          @relation(fields: [userId], references: [id])
    Task        Task[]
    TaskHistory TaskHistory[]

    @@unique([userId, name])
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Group         Group[]
    Task          Task[]

    TaskHistory TaskHistory[]
    Attachment  Attachment[]
    Note        Note[]
    Tag         Tag[]
    NoteHistory NoteHistory[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
